{
  "name": "dns-socket",
  "version": "1.4.1",
  "description": "Make custom low-level DNS requests from node with retry support.",
  "main": "index.js",
  "dependencies": {
    "dns-packet": "^1.1.0"
  },
  "devDependencies": {
    "standard": "^6.0.7",
    "tape": "^4.4.0"
  },
  "scripts": {
    "test": "standard && tape test.js"
  },
  "repository": {
    "type": "git",
    "url": "git+https://github.com/mafintosh/dns-socket.git"
  },
  "author": {
    "name": "Mathias Buus",
    "url": "@mafintosh"
  },
  "license": "MIT",
  "bugs": {
    "url": "https://github.com/mafintosh/dns-socket/issues"
  },
  "homepage": "https://github.com/mafintosh/dns-socket",
  "readme": "# dns-socket\n\nMake custom low-level DNS requests from node with retry support.\n\n```\nnpm install dns-socket\n```\n\n[![build status](https://travis-ci.org/mafintosh/dns-socket.svg?branch=master)](https://travis-ci.org/mafintosh/dns-socket)\n\n## Usage\n\n``` js\nvar dns = require('dns-socket')\nvar socket = dns()\n\nsocket.query({\n  questions: [{\n    type: 'A',\n    name: 'google.com'\n  }]\n}, 53, '8.8.8.8', function (err, res) {\n  console.log(err, res) // prints the A record for google.com\n})\n```\n\n## API\n\n#### `var socket = dns([options])`\n\nCreate a new DNS socket instance. Options include:\n\n``` js\n{\n  socket: customDgramSocket\n}\n```\n\n#### `socket.on('query', query, port, host)`\n\nEmitted when a dns query is received. The query is a [dns-packet](https://github.com/mafintosh/dns-packet)\n\n#### `socket.on('response', response, port, host)`\n\nEmitted when a dns response is received. The response is a [dns-packet](https://github.com/mafintosh/dns-packet)\n\n#### `var id = socket.query(query, port, [host], [callback])`\n\nSend a dns query. If host is emitted it defaults to localhost. When the remote replies the callback is called with `(err, response, query)` and an response is emitted as well. If the query times out the callback is called with an error.\n\nReturns the query id\n\n#### `socket.response(query, response, port, [host])`\n\nSend a response to a query.\n\n#### `socket.cancel(id)`\n\nCancel a query\n\n#### `socket.bind(port, [onlistening])`\n\nBind the underlying udp socket to a specific port.\n\n#### `socket.destroy([onclose])`\n\nDestroy the socket.\n\n#### `socket.inflight`\n\nNumber of inflight queries.\n\n## License\n\nMIT\n",
  "readmeFilename": "README.md",
  "_id": "dns-socket@1.4.1",
  "_shasum": "dacbd80945ffb96c7923a68d0b46f34f15e284ae",
  "_resolved": "https://registry.npmjs.org/dns-socket/-/dns-socket-1.4.1.tgz",
  "_from": "https://registry.npmjs.org/dns-socket/-/dns-socket-1.4.1.tgz"
}
